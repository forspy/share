//类的权限
//1.private 只允许类内部访问
//2.public 允许类外部内部访问（如果类里面没有声明private，则默认成private）
//3.protected 只允许类和类的子类访问（类继承）

//对象使用. 访问   对象指针使用->访问成员
//构造和析构 给类对象 初始化和回收的机会

//构造函数：1.没有返回值2.和类同名
//析构函数：1.没有返回值2.和~类同名3.只释放类中开辟的内存？待解决（类只声明而不定义，哪来的内存），在构造函数中开辟的内存，可以用析构函数释放？
//析构函数本身并不释放对象占用的内存空间,它只是在系统收回对象的内存空间之前执行扫尾工作
//例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。析构函数里什么操作语句也没有，为什么就能释放对象内存呢？ 这话有问题，应该是在退出前用delete释放内存，不能自动释放
//析构函数中可以释放一些这个对象所占有的资源（包括内存），这是要靠你自己写程序完成的，不能自动完成
/*
类的面向对象编程：
1:  人体结构:  头,手， 足, 身体 --人体的结构描述;（类成员）
2: 人类跑步程序:（成员函数）
摆动手臂
带动双脚
均匀呼吸;
3:  人体结构实例 小明:（类对象）
小明的头, 小明的手;
小明的足，小明的身体;
4: 小明跑步:（类对象使用成员函数）
使用人类跑步的方法和逻辑来操作小明实例的身体;
5: 类的实例的内存:
包括了每个数据成员, 不包括成员函数;
每个成员函数都是固定的,只是通用的逻辑,通用的程序;
*/
#include<iostream>
#include<cstring>
#include<cstdlib>

#include"human.h"

int main()
{
	human xiaoming;
	xiaoming.show();//直接使用初始的运动状态
	human xiaohong;
	xiaohong.walk(2,2,2,2);//载入小红的运动状态
	xiaohong.show();
	
	xiaoming.show();//小红的类成员的改变不影响小明的类成员
	//其实存在一个指向xiaoming对象的this指针
	
	int a = sizeof(human);//sizeof求类名和对象的大小一致
	int b = sizeof(xiaoming);
	printf("%d %d \n", a, b);
}